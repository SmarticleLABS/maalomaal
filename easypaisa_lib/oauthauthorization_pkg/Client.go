/*
 * easypaisa_lib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io )
 */

package oauthauthorization_pkg

import (
	"encoding/json"

	"github.com/SmarticleLABS/maalomaal/easypaisa_lib/apihelper_pkg"
	"github.com/SmarticleLABS/maalomaal/easypaisa_lib/configuration_pkg"
	"github.com/SmarticleLABS/maalomaal/easypaisa_lib/models_pkg"
	"github.com/apimatic/unirest-go"
)

/*
 * Client structure as interface implementation
 */
type OAUTHAUTHORIZATION_IMPL struct {
	config configuration_pkg.CONFIGURATION
}

/**
 * Create a new OAuth 2 token.
 * @param    string         authorization     parameter: Required
 * @param    *string        scope             parameter: Optional
 * @param    fieldParameters    Additional optional form parameters are supported by this endpoint
 * @return	Returns the *models_pkg.OAuthToken response from the API call
 */
func (me *OAUTHAUTHORIZATION_IMPL) CreateRequestToken(
	authorization string,
	scope *string,
	fieldParameters map[string]interface{}) (*models_pkg.OAuthToken, error) {
	//the base uri for api requests
	_queryBuilder := configuration_pkg.GetBaseURI(configuration_pkg.DEFAULT, me.config)

	//prepare query string for API call
	_queryBuilder = _queryBuilder + "/oauthtoken/v1/generate"

	//variable to hold errors
	var err error = nil
	//process optional query parameters
	_queryBuilder, err = apihelper_pkg.AppendUrlWithQueryParameters(_queryBuilder, map[string]interface{}{
		"grant_type": "client_credentials",
	})
	if err != nil {
		//error in query param handling
		return nil, err
	}

	//validate and preprocess url
	_queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
	if err != nil {
		//error in url validation or cleaning
		return nil, err
	}

	//prepare headers for the outgoing request
	headers := map[string]interface{}{
		"user-agent":    "APIMATIC 2.0",
		"accept":        "application/json",
		"Authorization": apihelper_pkg.ToString(authorization, ""),
	}

	//form parameters
	parameters := map[string]interface{}{

		"scope": scope,
	}

	//append optional form parameters
	if fieldParameters != nil {
		for k, v := range fieldParameters {
			parameters[k] = v
		}
	}

	//prepare API request
	_request := unirest.Post(_queryBuilder, headers, parameters)
	//and invoke the API call request to fetch the response
	_response, err := unirest.AsString(_request)
	if err != nil {
		//error in API invocation
		return nil, err
	}

	//error handling using HTTP status codes
	if _response.Code == 400 {
		err = apihelper_pkg.NewAPIError("OAuth 2 provider returned an error.", _response.Code, _response.RawBody)
	} else if _response.Code == 401 {
		err = apihelper_pkg.NewAPIError("OAuth 2 provider says client authentication failed.", _response.Code, _response.RawBody)
	} else if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
		err = apihelper_pkg.NewAPIError("HTTP Response Not OK", _response.Code, _response.RawBody)
	}
	if err != nil {
		//error detected in status code validation
		return nil, err
	}

	//returning the response
	var retVal *models_pkg.OAuthToken = &models_pkg.OAuthToken{}
	err = json.Unmarshal(_response.RawBody, &retVal)

	if err != nil {
		//error in parsing
		return nil, err
	}
	return retVal, nil

}
